# Семинар 1-2: примерный список задач:
# 1. По двум заданным числам проверить является ли одно квадратом второго
# 2. Найти максимальное из пяти чисел
# 3. Вывести на экран числа от -N до N
# 4. Показать первую цифру дробной части числа
# 5. Дано число. Проверить кратно ли оно 5 и 10 или 15 но не 30
# 6. Дано число обозначающее день недели. Вывести его название и указать является ли он выходным.
# 7. Проверить истинность утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат
# 8. Сообщить в какой четверти координатной плоскости или на какой оси находится точка с координатами Х и У
# 9. Указав номер четверти прямоугольной системы координат, показать допустимые значения координат для точек этой четверти
# 10. Найти расстояние между двумя точками пространства
# Семинар 3-4: примерный список задач
# 11. Для натурального N создать список: 1, -3, 9, -27, 81 и т.д.
# 12. Для натурального N создать словарь индекс-значение, состоящий из элементов последовательности 3k + 1.
# 13. Пользователь задаёт две строки. Определить количество количество вхождений одной строки в другой.
# 14. Подсчитать сумму цифр в вещественном числе.
# 15. Написать программу получающую набор произведений чисел от 1 до N.
#  Пример: пусть N = 4, тогда
# [ 1, 2, 6, 24 ]
# 16. Задать список из n чисел последовательности (1+1n)n и вывести на экран их сумму
# 17. Задать список из N элементов, заполненных числами из [-N, N]. Найти произведение элементов на указанных позициях. Позиции хранятся в файле file.txt в одной строке одно число
# 18. Реализовать алгоритм перемешивания списка.
# 19. Реализовать алгоритм задания случайных чисел. Без использования встроенного генератора псевдослучайных чисел
# 20. Определить, присутствует ли в заданном списке строк, некоторое число
# 21. Определить, позицию второго вхождения строки в списке либо сообщить, что его нет.
# 22. Найти сумму чисел списка стоящих на нечетной позиции
# 23. Найти произведение пар чисел в списке. Парой считаем первый и последний элемент, второй и предпоследний и т.д. Пример: [2, 3, 4, 5, 6] => [12, 15, 16]; [2, 3, 5, 6] => [12, 15]
# 24. В заданном списке вещественных чисел найдите разницу между максимальным и минимальным значением дробной части элементов. Пример: [1.1, 1.2, 3.1, 5, 10.01] => 0.19
# 25.Написать программу преобразования десятичного числа в двоичное
# 26.Дано число. Составить список чисел Фибоначчи, в том числе для отрицательных индексов.
#  Т е для k = 5, список будет выглядеть так: [5, −3,  2, −1,  1, 0, 1, 1, 2, 3, 5]
# 27. Строка содержит набор чисел. Показать большее и меньшее число
# 28. Найти корни квадратного уравнения Ax² + Bx + C = 0
# a. Математикой
# b. Используя дополнительные библиотеки*
# 29. Найти НОК двух чисел
# 30. Вычислить число p c заданной точностью d
# 	Пример: при d = 0.001, p = 3.141. 10-1d10-10
#
# 31. Составить список простых множителей натурального числа N
# Семинар 5-6: примерный список задач
# 32. Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
# 33. Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена и записать в файл многочлен степени k. *Пример: k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0
# 34. Даны два файла в каждом из которых находится запись многочлена. Сформировать файл содержащий сумму многочленов.
# 35. В файле находится N натуральных чисел, записанных через пробел. Среди чисел не хватает одного, чтобы выполнялось условие A[i] - 1 = A[i-1]. Найти его.
# 36. Дан список чисел. Выделить среди них числа, удовлетворяющие условию: следующее больше предыдущего. Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3] или [1, 7] или [1, 6, 7] и т.д.
# 37. Дан список чисел. Выделить среди них максимальное количество чисел, удовлетворяющих условию предыдущей задачи. Пример: [1, 5, 2, 3, 4, 6, 1, 7] => [1, 2, 3, 4, 6, 7]
# 38. Напишите программу, удаляющую из текста все слова содержащие "абв".
# 39. Помните игру с конфетами из модуля "Математика и Информатика"? Создайте такую игру для игры человек против человека
# Добавьте игру против бота
# Подумайте как наделить бота "интеллектом"
# 40. Вы когда-нибудь играли в игру "Крестики-нолики"? Попробуйте создать её.
# 41. Написать программу вычисления арифметического выражения заданного строкой. Используются операции +,-,/,*. приоритет операций стандартный. Пример: 2+2 => 4; 1+2*3 => 7; 1-2*3 => -6;
# Добавить возможность использования скобок, меняющих приоритет операций. Пример: 1+2*3 => 7; (1+2)*3 => 9;
# 42. Реализовать RLE алгоритм. реализовать модуль сжатия и восстановления данных.
# входные и выходные данные хранятся в отдельных файлах

# 1.По двум заданным числам проверять является ли первое квадратом второго

# print('Ведите первое число')
# a = int(input())
# print('Введите второе число')
# b = int(input())
# if b**2 == a:
#     print('первое число является квадратом второго')
# else:
#     print('первое число не является квдаратом второго')

# 2. Найти максимальное из пяти чисел

# a = 8
# b = 7
# c = 125
# d = 36
# e = 548
# if (a > b > c > d > e) :
#     print('a - максимальное число')
# elif (b > a > c > d > e):
#     print('b - максимальное число')
# elif (c > a > b > d > e):
#     print('c - максимальное число')
# elif (d > a > b > c > e):
#     print('d - максимальное число')
# else:
#     print('e - максимальное число')

# 3. Вывести на экран числа от -N до N

# print('Введите число N')
# n = int(input())
# for i in range(-n,n+1):
#     print(i)

# 4. Показать первую цифру дробной части числа

# print('Введите дробное число')
# y = float(input())
# print(int(y * 10) % 10)
#
# 5. Дано число. Проверить кратно ли оно 5 и 10 или 15 но не 30

# print('Введите число')
# a = int(input())
# if(a % 5 == 0) and (a % 10 == 0):
#    print('Число кратно 5,10')
# elif(a % 15 == 0) and (a % 30 != 0):
#    print('Число кратно 15 но не 30')
# else:
#     print('число не кратно 5,10 или кратно 15,но не кратно 30 ')

# Второй вариант решения

# print('Введите число')
# a = int(input())
# def func(a):
#     return (a % 5 == 0) and (a % 10 == 0) or (a % 15 == 0) and (a % 30 != 0)
# print(func(a))

# 6. Дано число обозначающее день недели. Вывести его название и указать является ли он выходным.

# print('Введите число')
# x = int(input())
# if x == 1:
#     print('Понедельник - рабочий день')
# elif x == 2:
#     print('Вторник - рабочий день')
# elif x == 3:
#     print('Среда - рабочий день')
# elif x == 4:
#     print('Четверг - рабочий день')
# elif x == 5:
#     print('Пятница - рабочий день')
# elif x == 6:
#     print('Суббота - выходной день')
# elif x == 7:
#     print('Воскресенье - выходной день')
# elif x > 7:
#     print('Введён неверный номер дня недели')

# 7. Проверить истинность утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат

# def logic(x, y, z):
#     return not(x or y or z) == (not x and not y and not z)
# for x in range (0, 2):
#         for y in range (0, 2):
#             for z in range (0, 2):
#                print (logic(x, y, z))

# 8. Сообщить в какой четверти координатной плоскости или на какой оси находится точка с координатами Х и У

# x = 5
# y = -3
# if x > 0 and y > 0:
#     print('1 четверть')
# elif x < 0 and y > 0:
#     print('2 четверть')
# elif x < 0 and y < 0:
#     print('3 четверть')
# else:
#     print('4 четверть')

# 9. Указав номер четверти прямоугольной системы координат, показать допустимые значения координат для точек этой четверти

# print('Введите номер четверти')
# a = int(input())
# def func(a):
#     if a == 1:
#         print('y > 0, x > 0')
#     elif a == 2:
#         print('y > 0, x < 0')
#     elif a == 3:
#         print('y < 0, x < 0')
#     elif a == 4:
#         print('y < 0, x > 0')
# func(a)

# 10. Найти расстояние между двумя точками пространства

# x1 = 6
# x2 = 8
# y1 = -11
# y2 = 10
# d = (x2-x1)**2 + (y2-y1)**2
# D = d**0.5
# print(D)

# 11. Для натурального N=5 создать список: 1, -3, 9, -27, 81 и т.д.

# print('Введите число N')
# n = int(input())
# def func(n):
#    m = {1}
#    for i in range (1, n):
#        m.add(3**i)
#
#    return (sorted(m))
# def minus(x):
#     res = x
#     for j in range (1,len(x), 2):
#         res[j] = -x[j]
#     return(res)
# print(minus(func(10)))

# 12. Для натурального N создать словарь индекс-значение, состоящий из элементов последовательности 3k + 1.

# print('Введите число N')
# n = int(input())
# def dictionary(n):
#     dictionary1 = {}
#     for i in range(0, n):
#         dictionary1= 3 * i + 1
#     return (dictionary1)
# print(dictionary(n))

#   13. Пользователь задаёт две строки. Определить количество вхождений одной строки в другой.

# s1 = 'qwertqwweqwerqeqweq'
# s2 = 'qw'
# index = s1.find(s2)
#
# def counter(s1, s2):
#     t = s1
#     count = 0
#     index = 0
#     while len(t) != 0:
#         index = t.find(s2, index)
#         if(index != -1):
#            count += 1
#            index += len(s2)
#            # t = t[index+len(s2):]
#         else:
#          break
#     return count
# print(counter(s1,s2))

# 14. Подсчитать сумму цифр в вещественном числе.

# def sum(n):
#     string_n = str(n)
#     total = 0
#     for i in string_n:
#         if i == '.':
#             total += 0
#         else:
#             total += int(i)
#     print(total)
#     return total
# sum(1.2354)

# 15. Написать программу получающую набор произведений чисел от 1 до N.

# print('Введите число N')
# n = int(input())
# def factorial(n):
#     list =[]
#     res = 1
#     i = 1
#     while i <= n:
#         res = i*res
#         #print(res)
#         i +=1
#         #print(i)
#         list.append(res)
#     return(list)
# print(factorial(n))

# 16. Задать список из n чисел последовательности (1+1/n)^n и вывести на экран их сумму

# def sequence(n):
#     list = []
#     for i in range (1, n):
#         res = (1+(1/i))**i
#         list.append(res)
#     return(list)
# print(sequence(6))
# print(sum(sequence(6), start=0))

# 17.Задать список из N элементов, заполненных числами из [-N, N]. Найти произведение элементов на указанных позициях. Позиции хранятся в файле file.txt в одной строке одно число

# def composition(n):
#     list = []
#     for i in range (-n, n):
#         list.append(i)
#     return(list)
# print(composition(5))
# list1 = composition(5)
#
# with open('file.txt') as f:
#     n = int(f.read(1))-1
#     k = int(f.read(2))-1
#
# print(list1[n]*list1[k])

#18. Реализовать алгоритм перемешивания списка.

# import random
# from operator import itemgetter
# list = [10, 3 , 4 , 5, 6, 6, 7, 15, 8, 9]
# for i in range(0, len(list)-1):
#     k = random.randint(i, len(list)-1)
#     temp = list[i]
#     list[i] = list[k]
#     list[k] = temp
# print(list)

# 19 Реализовать алгоритм задания случайных чисел. Без использования встроенного генератора псевдослучайных чисел



# 20. Определить, присутствует ли в заданном списке строк, некоторое число

# def find_number(n):
#     string1 = ('jh','sdht','kjhasd', '24', 'dpo', '7')
#     N = str(n)
#     for i in range(len(string1)):
#         if N in string1:
#             return True
#         else:
#             return False
# print(find_number(7))

# 21. Определить, позицию второго вхождения строки в списке либо сообщить, что его нет.

# a = ['f','a','j','s','system','f','254']
# num = 0
# for i in range(len(a)):
#     if a[i] == "f":
#         num += 1
#         if num == 2:
#             print(i+1)
# if num == 1:
#     print('-1')
# elif "f" not in a:
#     print('-2')

# 22. Найти сумму чисел списка стоящих на нечетной позиции

# a = (1, 25, 7, 45, 46, 22, 74)
# def odd_sum(a) -> int:
#     s = 0
#     for i in range(1, len(a), 2):
#         s += a[i]
#     return s
# print(odd_sum(a))

# 23. Найти произведение пар чисел в списке.Парой считаем первый и последний элемент, второй и предпоследний

# from random import randint
# import math
#
# def get_numbers(n, first, last):
#     return [randint(first, last) for i in range(n)]
#
# def mult_pairs(mylist):
#     return [mylist[i] * mylist[-i - 1] for i in range(math.ceil(len(mylist)/2))]
#
# n = 9
# first = 1
# last = 10
#
# mylist = get_numbers(n, first, last)
# print(mylist)
# print(mult_pairs(mylist))

# 24. В заданном списке вещественных чисел найдите разницу между максимальным и минимальным значением дробной части элементов. Пример: [1.1, 1.2, 3.1, 5, 10.01]

# from random import uniform
#
# def get_real_nums (n, first, last):
#     return [round(uniform(first,last), 2) for i in range(n)]
#
# def find_diff(mynums):
#     nums = [round(x - int(x), 2) for x in (mynums)]
#     return max(nums) - min(nums)
#
# n = 5
# first = 1
# last = 10
# mynums = get_real_nums(n, first, last)
#
# print (mynums)
# print(find_diff(mynums))

# 25. Написать программу преобразования десятичного числа в двоичное

# n = int(input('Введите число: '))
#
# def conv_dec_to_bin(n):
#     bin_num = ''
#     while n > 1:
#         bin_num += str(n % 2)
#         n = n // 2
#     return bin_num[::-1]
#
# print(conv_dec_to_bin(n))

# 26.Дано число. Составить список чисел Фибоначчи, в том числе для отрицательных индексов.

# n = int(input('Введите число: '))
#
# def get_fibonacci(n):
#     fibo_nums = []
#     a, b = 1, 1
#     for i in range(n-1):
#         fibo_nums.append(a)
#         a, b = b, a + b
#     a, b = 0, 1
#     for i in range (n):
#         fibo_nums.insert(0, a)
#         a, b = b, a - b
#     return fibo_nums
#
# fibo_nums = get_fibonacci(n)
# print(get_fibonacci(n))
# print(fibo_nums.index(0))

# 27. Строка содержит набор чисел. Показать большее и меньшее число

# string = '25 1 2 115 3054'
# def convert_to_int(str):
#     return [int(x)for x in str.split()]
# str_list = convert_to_int(string)
# print(max(str_list), min(str_list))

# 28.Найти корни квадратного уравнения Ax² + Bx + C = 0

# import math
# a = 3
# b = 5
# c = 2
# def find_roots(a, b, c):
#    D = b*b -4*a*c
#    roots = []
#    if D < 0:
#      roots.append('нет корней')
#      return roots
#    x1 = (-b + math.sqrt(D)) / 2*a
#    roots.append(x1)
#    if D > 0:
#        x2 =(-b - math.sqrt(D)) / 2*a
#        roots.append(x2)
#    return roots
# print(find_roots(a, b, c))
# print(type(find_roots(a, b, c)))

# 29. Найти НОК двух чисел

# from math import lcm
# a = 75
# b = 15
# def get_lcm(a, b):
#     return lcm(a, b)
# print(get_lcm(a, b))

# 30. Вычислить число p c заданной точностью d Пример: при d = 0.001, p = 3.141. 10-1d10-10

# import math
# from math import pi
#
# n = pi
# print(n)
#
# # Формула Бэйли — Боруэйна — Плаффа
#
# n = 100
# my_pi = sum(1/16**x*(4/(8*x + 1) - 2/(8*x + 4) - 1/(8*x + 5) - 1/(8*x + 6)) for x in range(n))
#
# print(my_pi)





# 31. Составить список простых множителей натурального числа N

# n = 500
# def task31 (n):
#     i = 2
#     array = []
#     while n != 1:
#         if n % i == 0:
#             array.append(i) #3
#             n = n / i
#             i = 2
#         else:
#             i += 1
#     return (array)
#
# print (task31 (n))

# 32. Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.

# list = (1, 5, 2, 3, 5, 10, 10, 5)
# def get_unic_value(list):
#     return [i for i in set(list)]
# print(get_unic_value(list))

# 33. Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена и записать в файл многочлен степени k. *Пример: k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

from random import randint
import itertools

k = randint(0, 100)

def get_ratios(k):
    ratios = [randint(0, 10) for i in range (k + 1)]
    while ratios[0] == 0:
        ratios[0] = randint(1, 10)
    return ratios

def get_polynomial(k, ratios):
    var = ['*x^']*(k-1) + ['*x']
    polynomial = [[a, b, c] for a, b, c  in itertools.zip_longest(ratios, var, range(k, 1, -1), fillvalue = '') if a !=0]
    for x in polynomial:
        x.append(' + ')
    polynomial = list(itertools.chain(*polynomial))
    polynomial[-1] = ' = 0'
    return "".join(map(str, polynomial)).replace(' 1*x',' x')


ratios = get_ratios(k)
polynom1 = get_polynomial(k, ratios)
print(polynom1)

with open('33_Polynomial.txt', 'w') as data:
    data.write(polynom1)


# Второй многочлен для следующей задачи:

k = randint(2, 5)

ratios = get_ratios(k)
polynom2 = get_polynomial(k, ratios)
print(polynom2)

with open('33_Polynomial2.txt', 'w') as data:
    data.write(polynom2)